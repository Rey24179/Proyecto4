Mundo



import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)

/**
 * Write a description of class Menu here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class MemoryWorld extends World {
    private int gridSize;

    public MemoryWorld() {    
        super(600, 400, 1);
        showDifficultyMenu();
    }
    
    private void showDifficultyMenu() {
        // Agregar botones para seleccionar la dificultad
        addObject(new DifficultyButton("Fácil", 4), getWidth()/2, getHeight()/3);
        addObject(new DifficultyButton("Medio", 6), getWidth()/2, getHeight()/2);
        addObject(new DifficultyButton("Difícil", 8), getWidth()/2, 2*getHeight()/3);
    }
    
    public void startGame(int gridSize) {
        this.gridSize = gridSize;
        removeObjects(getObjects(DifficultyButton.class));
        setupGame();
    }
    
    private void setupGame() {
        // Configurar el juego con las cartas de memoria
        for (int i = 0; i < gridSize; i++) {
            for (int j = 0; j < gridSize; j++) {
                addObject(new MemoryCard(), 100 + i * 50, 100 + j * 50);
            }
        }
    }
}


Actores

import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)

/**
 * Write a description of class Boton here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class DifficultyButton extends Actor {
    private String label;
    private int gridSize;

    public DifficultyButton(String label, int gridSize) {
        this.label = label;
        this.gridSize = gridSize;
        setImage(new GreenfootImage(label, 24, Color.WHITE, Color.BLACK));
    }

    public void act() {
        if (Greenfoot.mouseClicked(this)) {
            ((MemoryWorld)getWorld()).startGame(gridSize);
        }
    }
}



import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)

/**
 * Write a description of class Memory here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class MemoryCard extends Actor {
    private boolean flipped = false;
    private GreenfootImage frontImage;
    private GreenfootImage backImage;

    public MemoryCard() {
        backImage = new GreenfootImage("back.png");
        frontImage = new GreenfootImage("front.png"); // Debes asignar la imagen correcta
        setImage(backImage);
    }

    public void act() {
        if (Greenfoot.mouseClicked(this)) {
            flip();
        }
    }

    public void flip() {
        if (flipped) {
            setImage(backImage);
        } else {
            setImage(frontImage);
        }
        flipped = !flipped;
    }
}
